# Imports.
from datetime import timedelta, date
from requests import get
import csv

def main() -> None:
    today: date = date.today()
    CVEs: dict[str: str] = getCVEs(today)
    
    for CVE in CVEs:
        vulnerability: dict[str: str] = CVE["cve"]
        sourceIdentifier: str = vulnerability["sourceIdentifier"]

        # If any of the reporting parties are not Microsoft, skip them.
        if "microsoft" not in sourceIdentifier:
            continue

        # newline="" is specified because without it, the CSV file has a blank row of entries in between each real row of entries.
        with open(fr"filelocation\Report Output - {today.strftime("%m-%d-%Y")}.csv", "a", newline="") as file:
            writer = csv.writer(file)

            # Checking if the file is empty or not. Write a header row if so.
            if file.tell() == 0:
                writer.writerow(["Title", "Source Identifier", "Date Published", "Last Modified" ,"Status", "Attack Vector", "Attack Complexity", "Privileges Required", "User Interaction", "Scope", "Confidentiality Impact", "Integrity Impact", "Availability Impact", "Base Severity", "Base Score","Exploitability Score", "Impact Score"])
                continue
            
            # Otherwise, add the CVE to the report.
            cvssMetricV31: dict[str: str] = vulnerability["metrics"]["cvssMetricV31"][0]
            cvssData: dict[str: str] = cvssMetricV31["cvssData"]

            # Get only the date, not the time.
            datePublished: date = (vulnerability["published"]).split("T")[0]
            dateModified: date = (vulnerability["lastModified"]).split("T")[0]
            result: list[str] = [
                vulnerability["descriptions"][0]["value"],
                vulnerability["sourceIdentifier"],
                datePublished,
                dateModified,
                vulnerability["vulnStatus"],
                cvssData["attackVector"],
                cvssData["attackComplexity"],
                cvssData["privilegesRequired"],
                cvssData["userInteraction"],
                cvssData["scope"],
                cvssData["confidentialityImpact"],
                cvssData["integrityImpact"],
                cvssData["availabilityImpact"],
                cvssData["baseSeverity"],
                cvssData["baseScore"],
                cvssMetricV31["exploitabilityScore"],
                cvssMetricV31["impactScore"]
            ]
            writer.writerow(result)

# Function to use the National Vulnerabilities Database to get all CVE's within a given time frame. Currently within the last 31 days.
def getCVEs(today: date) -> dict[str: str]:
    recent_date: date = today - timedelta(days=31)
    endpoint: str = f"https://services.nvd.nist.gov/rest/json/cves/2.0?pubStartDate={recent_date}T00:00:00.000&pubEndDate={today}T00:00:00.000&cvssV3Severity=HIGH&resultsPerPage=100"
    response: dict[str: str] = get(endpoint).json()
    return response["vulnerabilities"]

if __name__ == "__main__":
    main()
